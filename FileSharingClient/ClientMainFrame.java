package filesharingclient;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class ClientMainFrame extends javax.swing.JFrame {

    private class ExitListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.exit (0);
        }
    }
    
    private class FileSettingsListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            fileSettingsForm.initialize ();
            fileSettingsForm.setVisible(true);
        }
    }
    
    private void fillClientList () {
        String[] clientIdList = new String[idList.length];
        for (int i=0; i<idList.length; i++) {
            if (!ClientGlobals.whitelist.containsKey(idList[i])) {
                clientIdList[i] = idList[i] + "(x)";
            }
            else {
                clientIdList[i] = idList[i];
            }
        }
        clientList.setListData(clientIdList);
    }
    
    public void addLogItem (Component c) {
        logPanel.add (c);
        logHeight += c.getHeight();
        logPanel.setSize(logHeight, logPanel.getPreferredSize().width);
        logPanel.validate();
    }
    
    private void setButtonsEnabled (boolean b) {
        refreshButton.setEnabled(b);
        sendButton.setEnabled(b);
        broadcastButton.setEnabled(b);
        acceptButton.setEnabled(b);
        denyButton.setEnabled(b);
    }
    
    public ClientMainFrame() {
        initComponents();
        
        ////////////////////////////////////////////
        ClientGlobals.whitelist = new HashMap <> ();
        ClientGlobals.downloadThreads = new ArrayList <> ();
        logHeight = 0;
        ////////////////////////////////////////////
        
        /////////INISIALISASI MENU/////////////////
        fileSettingsForm = new FileSettingsForm ();
        menuBar.setMnemonic(KeyEvent.VK_F);
        JMenuItem fileSettingsMenuItem = new JMenuItem ("File Settings", KeyEvent.VK_S);
        JMenuItem exitMenuItem = new JMenuItem ("Exit", KeyEvent.VK_X);
        fileSettingsMenuItem.addActionListener(new FileSettingsListener());
        exitMenuItem.addActionListener(new ExitListener ());
        menuBar.add (fileSettingsMenuItem);
        menuBar.add (exitMenuItem);
        //////////////////////////////////////////
        
        //////////INISIALISASI FILE CHOOSER///////
        fileChooser = new JFileChooser ();
        //////////////////////////////////////////
        
        /////////INISIALISASI LOG PANEL///////////
        logPanel = new JPanel();
        logPanel.setBackground(Color.WHITE);
        logPanel.setLayout(new BoxLayout(logPanel, BoxLayout.Y_AXIS));
        scrollPane1.setViewportView(logPanel);
        //////////////////////////////////////////

        setButtonsEnabled (false);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hostTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList();
        acceptButton = new javax.swing.JButton();
        denyButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        broadcastButton = new javax.swing.JButton();
        scrollPane1 = new javax.swing.JScrollPane();
        jLabel5 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBar = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FileSharing Client");

        hostTextField.setText("localhost");

        jLabel1.setText("Host:");

        jLabel2.setText("Id:");

        idTextField.setText("id");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Port:");

        portTextField.setText("1100");

        jScrollPane1.setViewportView(clientList);

        acceptButton.setText("Terima");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        denyButton.setText("Tolak");
        denyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Daftar User");

        sendButton.setText("Kirim File..");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        broadcastButton.setText("Broadcast File..");

        scrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setText("File:");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        menuBar.setText("File");
        jMenuBar1.add(menuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectButton)
                        .addGap(0, 109, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(acceptButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(denyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(sendButton)
                                .addGap(18, 18, 18)
                                .addComponent(broadcastButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(scrollPane1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton)
                    .addComponent(jLabel3)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(sendButton)
                    .addComponent(broadcastButton)
                    .addComponent(refreshButton))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(acceptButton)
                            .addComponent(denyButton)))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //CONNECT
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (!ClientGlobals.isConnected) {
            String host = hostTextField.getText();
            int port = Integer.parseInt(portTextField.getText());
            try {
                cmdSocket = new Socket (host, port);
                
                writer = new BufferedWriter (new OutputStreamWriter (cmdSocket.getOutputStream()));
                reader = new BufferedReader (new InputStreamReader (cmdSocket.getInputStream()));
                
                ClientGlobals.id = idTextField.getText ();
                ClientGlobals.key = (new Long(Math.round(Math.random()))).toString() + System.currentTimeMillis();
                
                //baca welcome
                reader.readLine();
                
                //kirim autentikasi
                writer.write (ClientGlobals.id + " " + ClientGlobals.key + "\r\n");
                writer.flush ();
                
                String command = reader.readLine();
                System.out.println (command);
                //tunggu balesan
                Scanner reply = new Scanner(command);
                int status = reply.nextInt();
                //kalau 200 AUTHENTICATION OK, buat koneksi notif
                if (status == 200) {
                    Socket notifSocket = new Socket (host, port+1);
                    BufferedWriter nwriter = new BufferedWriter (new OutputStreamWriter (notifSocket.getOutputStream()));
                    BufferedReader nreader = new BufferedReader (new InputStreamReader (notifSocket.getInputStream()));
                    
                    //baca welcome
                    nreader.readLine();
                    
                    //kirim autentikasi ke koneksi notif
                    nwriter.write (idTextField.getText() + " " + ClientGlobals.key + "\r\n");
                    nwriter.flush ();
                    //tunggu balesan
                    Scanner nscanner = new Scanner (nreader.readLine());
                    //kalau 200 AUTHENTICATION OK, selesai
                    if (nscanner.nextInt() == 200) {
                        
                        ClientNotifThread cnt = new ClientNotifThread (notifSocket, this);
                        cnt.start ();
                        
                        addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Berhasil membuat koneksi ke " + host + ":" + port));
                        ClientGlobals.isConnected = true;                
                        connectButton.setText ("Disconnect");
                        setButtonsEnabled (true);
                        for (ClientDataThread cdt : ClientGlobals.downloadThreads) {
                            cdt.start();
                        }
                    }
                    else {
                        addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Gagal membuat koneksi notifikasi (" + host + ":" + port + ")"));
                    }
                }
                else if (status == 201) {
                    addLogItem (new JLabel(ClientGlobals.getCurrentTime() + " -- Tidak bisa membuat koneksi: ID sudah terpakai"));
                }
                else {
                    addLogItem (new JLabel(ClientGlobals.getCurrentTime() + " -- Koneksi ke " + host + ":" + port + " ditolak"));
                }
                
            }
            catch (Exception ex) {
                Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Tidak bisa membuat koneksi ke " + host + ":" + port));
                addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- " + ex.getMessage()));
            }
            
        }
        else {
            try {
                ClientGlobals.isConnected = false;
                setButtonsEnabled (false);
                connectButton.setText ("Connect");
                cmdSocket.close();
                addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Terputus dari " + cmdSocket.getInetAddress().getHostAddress() + ":" + cmdSocket.getPort()));
            }
            catch (Exception ex) {
                Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    //LIST
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        if (ClientGlobals.isConnected) {
            try {
                //kirim command LIST
                writer.write ("LIST\r\n");
                writer.flush ();
                addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- LIST"));
                try {
                    Scanner reply = new Scanner (reader.readLine());
                    reply.nextInt();
                    int num = reply.nextInt();
                    idList = new String[num-1];
                    String id;
                    int idListIndex = 0;
                    for (int i=0; i<num; i++) {
                        reply = new Scanner (reader.readLine());
                        reply.useDelimiter("\r\n");
                        id = reply.next();
                        if (!id.equals(ClientGlobals.id))
                            idList[idListIndex++] = id;
                    }
                    fillClientList();
                }
                catch (Exception ex) {
                    addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Gagal menerima respon LIST"));
                    Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- Gagal mengirim LIST"));
                Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    //ACCEPT
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        int[] selected = clientList.getSelectedIndices();
        for (int i : selected) {
            ClientGlobals.whitelist.put (idList[i], true);
        }
        fillClientList();
    }//GEN-LAST:event_acceptButtonActionPerformed
    
    //DENY
    private void denyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyButtonActionPerformed
        int[] selected = clientList.getSelectedIndices();
        for (int i : selected) {
            ClientGlobals.whitelist.remove (idList[i]);
        }
        fillClientList();
    }//GEN-LAST:event_denyButtonActionPerformed

    //SEND
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (ClientGlobals.isConnected) {
            try {
                int[] selected = clientList.getSelectedIndices();
                if (selected.length > 0) {
                    int returnVal = fileChooser.showOpenDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File f = fileChooser.getSelectedFile();
                        writer.write ("SEND \"" + f.getName() + "\" " + f.length() + " " + selected.length + "\r\n");
                        for (int i : selected) {
                            writer.write (idList[i] + "\r\n");
                        }
                        writer.flush ();
                        addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- SEND \"" + f.getName() + "\" " + f.length() + " " + selected.length));
                        String reply = reader.readLine ();
                        System.out.println (ClientGlobals.id + " get " + reply + " as reply to SEND");
                        Scanner scan = new Scanner (reply);
                        if (scan.nextInt() == 402) {
                            int num = scan.nextInt ();
                            for (int i=0; i<num; i++) {
                                addLogItem (new JLabel ("\t" + reader.readLine() + " menyetujui kiriman"));
                            }
                            scan = new Scanner(reader.readLine());
                            int port = scan.nextInt();
                            System.out.println ("Membuat ClientDataThread ke port " + port);
                            ClientDataThread cdt = new ClientDataThread (cmdSocket.getInetAddress().getHostAddress(), port, f, ClientDataThread.Mode.WRITE, this);
                            System.out.println ("Selesai membuat ClientDataThread");
                            cdt.start ();
                        }
                        else {
                            addLogItem (new JLabel (ClientGlobals.getCurrentTime() + " -- SEND gagal, tidak ada penerima"));
                        }
                    }
                }
                else {
                    JOptionPane.showMessageDialog (this, "Silahkan pilih penerima dari daftar user");
                }
            }
            catch (Exception ex) {
            
            }
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton broadcastButton;
    private javax.swing.JList clientList;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton denyButton;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu menuBar;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
    private JPanel logPanel;
    private int logHeight;
    private JFileChooser fileChooser;
    private FileSettingsForm fileSettingsForm;
    private Socket cmdSocket;
    private BufferedWriter writer;
    private BufferedReader reader;
    private String[] idList;
}
